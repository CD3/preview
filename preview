#! /bin/bash

function print_usage()
{
cat <<EOF
Usage: preview [options] [FILE]

'preview' allows you to quickly preview a file from its source, for example markdown files.
It uses the 'entr' command to monitor the source file and automatically update the preview.

'preview' uses a makefile to execute the commands required to build, view, and refresh the preview.
If a makefile is found in the current directory, it will be used, otherwise a default makefile is used.
If you choose to use your own makefile, you must define the following targets

build - This target should build the output file to be viewed from your source. By default 'preview' uses pandoc to generate an html
        file from markdown source. This target will be ran each time the source file is updated (saved).

view  - This target should open the output file in a viewing program. By default 'preview' uses vimb to open the html
        file that was generated with the build target.

refresh - This target should refresh the viewer. By default 'preview' uses the socket communication feature of vimb to send refresh commands.

These targets are optional.

outfile - This target should print the name of the output file (the file that will be viewed with the viewer).
          By default, 'preview' generates the output filename by replacing all slashes (/) and periods (.) with underscores (_),
          then appendeng a ".html" extension and prepends the name of the temp directory (see below)
          NOTE: this should ONLY print the name of the file. If this is being generated by a command, you should put a '@' in front
          of the command so that it is not echo'ed by 'make'

logfile - This target should print the name of the log file (the file that command output will be directed too by 'preview')
          By default, 'preview' directs output to /dev/stdout.
          NOTE: this should ONLY print the name of the file. If this is being generated by a command, you should put a '@' in front
          of the command so that it is not echo'ed by 'make'

These variables will be passed into the makefile by 'preview', and can be used in your targets.

INFILE  - the name of the source file to be previewed.
INDIR   - the directory containing the source file.
OUTFILE - the name that `preview` expects for the generated file that will be viewed by the viewer. The Makefile can just ignore this and use its own if it wants.
LOGFILE - the name of a file that command output will be written to.
TMPDIR  - the name of a temperary directory that has been created by 'preview'. If you want the output files to be generated in a temp
          directory, you should prepend the output filename with this directory.

Dependencies:
  Required:
    - getopt: command line parser for shell scripts (should already be installed)
    - make: preview uses Makefiles for callbacks
    - entr: A small utility for triggering commands when a file is modified.

  Optional:
    - pandoc : used by preview's default makefile to build html from markdown
    - vimb : used by preview's default makefile to view html
    - socat : used by preview's default makefile to refresh preview

You can run:
  > preview -p
to see the makefile that is used by 'preview' by default.

Options:
      -p --print-makefile  Print the makefile that will be used and exit.
      -f --makefile FILE Use FILE instead of default makefile.


EOF
}

declare -A LOG_LEVELS
# https://en.wikipedia.org/wiki/Syslog#Severity_level
LOG_LEVELS=([0]="error" [1]="info" [2]="debug")
function .log () {
  local LEVEL=${1}
  shift
  if [ ${__VERBOSE} -ge ${LEVEL} ]; then
    echo "[${LOG_LEVELS[$LEVEL]}]" "$@"
  fi
}

# the getopt command is external to the shell. essentially what it
# does is parse the command line parameters and rearrange them so
# that all of the options are given before any of the arguments, and
# adds a '--' between the options and arguments. 
# then you can setup a while loop to process options easily and terminate
# it when you run into the '--'

# both long and short options can be given
# short options are passed to -o
# long  options are passed to -l
# a colon (:) after an option means it has a required argument
# two colons (::) after an option means it has a optional argument


NEW_COMMAND_LINE=$(getopt -o hpf:v -l print_makefile,help,makefile:,verbose -n preview -- "$@")   # this creates a rearranged version of the command line
if [ $? != 0 ] ; then .log 0 "getopt returned an error, Terminating..." >&2 ; exit 1 ; fi
eval set -- "$NEW_COMMAND_LINE"                                                                          # this sets up positional parameters to the new command line


# now we can just manually loop through the positional parameters
print_makefile=0
makefile=""
__VERBOSE=0
while true ; do
  case "$1" in
    -h|--help)
        print_usage
        exit;
        ;;
    -v|--verbose)
        __VERBOSE=$(($__VERBOSE + 1))
        shift 1
        ;;
    -p|--print_makefile)
        print_makefile=1
        shift 1
        ;;
    -f|--makefile)
        makefile=$2
        shift 2
        ;;
    --) shift ; break ;;
     *) .log 0 "Unreconized option got through: '$1'" ; exit 1 ;;
  esac
done

# arguments start at $1...
ifile=${1}
shift

if [ $print_makefile -eq 0 ]; then
  if [ ! -e "$ifile" ]; then
    last_ifile=$(cat ~/.preview/last_ifile || echo "")
    if which zenity > /dev/null 2>&1 
    then
      ifile=$(zenity --file-selection --title="Select a file." --filename=${last_ifile} 2>/dev/null)
    elif which Xdialog > /dev/null 2>&1 
    then
      ifile=$(Xdialog --no-buttons -fselect "$last_ifile" 0 0 2>&1)
    elif which dialog > /dev/null 2>&1
    then
      ifile=$(dialog --fselect '' 0 0)
    else
      read -p "What file would you like to preview?" ifile
    fi
  fi
fi

if [ ! -f "$ifile" ]; then
  .log 0 "Input file '${ifile}' does not exist or is not a file."
  exit 1
fi

tmpdir=$(mktemp -d)

# try to find a makefile
wd=$(dirname $ifile) # directory that the source file is in
ext=${ifile##*.}     # extension of the source file

if [ ! -e "$makefile" ]
then
  # look for a Makefile with the same extension as the input file
  # in the same directory as the input file
  makefile="$wd/Makefile.$ext"
fi

if [ ! -e "$makefile" ]
then
  # look for a Makefile with the same extension as the input file
  # in the .preview directory
  makefile="$HOME/.preview/Makefile.$ext"
fi

if [ ! -e "$makefile" ]
then
  # look for a Makefile
  # in the same directory as the input file
  makefile="$wd/Makefile"
fi

if [ ! -e "$makefile" ]
then
  # look for a Makefile in the directory we where called from
  makefile="$HOME/.preview/Makefile"
fi


if [ ! -e "$makefile" ] 
then
# create a makefile
makefile=${tmpdir}/Makefile
cat >$makefile << 'EOF'
.PHONY: outfile
outfile:
	@echo $(TMPDIR)/$$( echo $(INFILE)  | sed 's|/|_|g' | sed 's|\.|_|g').html

logfile:
	@echo ./preview.log

.PHONY: build
build:
  @pandoc -f markdown -t html -o $(OUTFILE) $(INFILE)

.PHONY: view
view:
  @vimb -s -d file://$(OUTFILE) 1>$(TMPDIR)/_socket

.PHONY: refresh
refresh:
	@echo ':o file://$(OUTFILE)<CR>' | socat - UNIX-CONNECT:`tail -n 1 $(TMPDIR)/_socket`
EOF
fi


.log 2 "Using '$makefile' for makefile"

if [ $print_makefile -eq 1 ]
then
  cat $makefile
  exit
fi

# exit if no input file was found
if [ ! -e "$ifile" ]; then
  exit 1
fi


ifile=$(readlink -f $ifile)
idir=$(dirname $ifile)
echo $ifile > ~/.preview/last_ifile
make="make -f $makefile INFILE=${ifile} INDIR=${idir} TMPDIR=${tmpdir}"
.log 2 $make

# get output filename
if $make outfile > /dev/null 2>&1
then
  ofile=$($make outfile)
else
  ofile=${tmpdir}/$( echo ${ifile}  | sed 's|/|_|g' | sed 's|\.|_|g')
fi

# get log filename
if $make logfile > /dev/null 2>&1
then
  lfile=$($make logfile)
else
  if [ ${__VERBOSE} -ge 1 ]; then
    lfile="/dev/stdout"
  else
    lfile="/dev/null"
  fi
fi

make="$make OUTFILE=${ofile} LOGFILE=${lfile}"




.log 3 "variables:"
.log 3 "INFILE: $ifile"
.log 3 "OUTFILE: $ofile"
.log 3 "LOGFILE: $lfile"
.log 3 "INDIR: $idir"
.log 3 "TMPDIR: $tmpdir"

_cleanup() {
        .log 2 "Making sure child processed have been cleaned up..."
        for pid in $viewPIDs $viewPID $entrPIDs $entrPID
        do
                if kill -s 0 $pid > /dev/null 2>&1
                then
                        kill $pid
                fi
        done
}
trap _cleanup SIGTERM
trap _cleanup SIGINT

list_children()
{
  local children=$(ps -o pid= --ppid "$1")

  for pid in $children
  do
    list_children "$pid"
  done

  echo "$children"
}

$make build > ${lfile} 2>&1
$make view >> ${lfile} 2>&1 &
viewPID=$!
sleep 0.1

ls $ifile | entr sh -c "$make build > ${lfile} 2>&1 && $make refresh" >> ${lfile} 2>&1 &
entrPID=$!

sleep 0.1

viewPIDs=$(list_children $viewPID)
entrPIDs=$(list_children $entrPID)


.log 2 "entr PID: $entrPID"
.log 2 "view PID: $viewPID"
wait $viewPID
kill $entrPID
